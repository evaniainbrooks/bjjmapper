class RollFindr.Models.Location extends Backbone.Model
  @LOCATION_TYPE_ACADEMY: <%= Location::LOCATION_TYPE_ACADEMY %>
  @LOCATION_TYPE_EVENT_VENUE: <%= Location::LOCATION_TYPE_EVENT_VENUE %>

  @STATUS_VERIFIED: <%= Location::STATUS_VERIFIED %>
  @STATUS_REJECTED: <%= Location::STATUS_REJECTED %>
  @STATUS_PENDING: <%= Location::STATUS_PENDING %>

  initialize: (options)->
    id = this.get('id')
    instructors = @get('instructors')
    instructors = new RollFindr.Collections.LocationInstructorsCollection(instructors, {location_id: id})
    this.set('instructors', instructors)
    
    reviews = @get('reviews')
    reviews = new RollFindr.Collections.ReviewsCollection(reviews, {location_id: id})
    this.set('reviews', reviews)
    
    events = @get('events')
    events = new RollFindr.Collections.LocationEventsCollection(events, {location_id: id})
    this.set('events', events)

  getStatusClass: ->
    if @get('status') == RollFindr.Models.Location.STATUS_PENDING
      return 'pending'

    if @get('status') == RollFindr.Models.Location.STATUS_REJECTED
      return 'rejected'

  getColor: ->
    if (@get('loctype') == RollFindr.Models.Location.LOCATION_TYPE_EVENT_VENUE)
      if @get('events').length > 0
        return @get('events').first().getColor()

    types = ['academy']
    types.push('blackbelt-academy') if @get('has_black_belt')
    types.push('independent-academy') unless @get('team_id') && @get('team_id').length > 0

    return types.join(' ')

  isVisible: (center, radius)->
  paramRoot: 'location'
  urlRoot: Routes.locations_path
  defaults:
    title: null
    description: null
    directions: null
    street: null
    city: null
    postal_code: null
    state: null
    country: null
    id: null
    team_id: null
    coordinates: []
    instructors: []
    loctype: Location.LOCATION_TYPE_ACADEMY
    status: Location.STATUS_VERIFIED

class RollFindr.Collections.LocationsCollection extends Backbone.Collection
  model: RollFindr.Models.Location
  url: Routes.search_map_path()
  sort_key: 'name'
  comparator:
    (item)->
      return item.get(this.sort_key)
  sortByField:
    (fieldName)->
      this.sort_key = fieldName
      this.sort()

class RollFindr.Collections.NearbyLocationsCollection extends Backbone.Collection
  initialize: (options)->
    @lat = options.lat
    @lng = options.lng
    @reject = options.reject
    @location_type = options.location_type || []
    @count = options.count || 3

  url: =>
    Routes.nearby_locations_path
      lat: @lat
      lng: @lng
      reject: @reject
      location_type: @location_type
      count: @count

class RollFindr.Collections.RecentLocationsCollection extends Backbone.Collection
  initialize: (options)->
    @count = options.count

  url: =>
    Routes.recent_locations_path({count: @count})
